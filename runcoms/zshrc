#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Settings for the powerlevel9k prompt prior to loading Prezto
DEFAULT_USER=$USER

POWERLEVEL9K_MODE='nerdfont-complete'
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator context dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status battery custom_wifi_signal time)
POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
POWERLEVEL9K_SHORTEN_DELIMITER=""
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"

POWERLEVEL9K_CUSTOM_WIFI_SIGNAL="zsh_wifi_signal"
POWERLEVEL9K_CUSTOM_WIFI_SIGNAL_BACKGROUND="blue"
POWERLEVEL9K_CUSTOM_WIFI_SIGNAL_FOREGROUND="yellow"

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

export PATH=/usr/local/bin:~/scripts:$PATH:/usr/sbin:/sbin

# This function requires installing osx_wifi from https://github.com/tristor/osx_wifi
zsh_wifi_signal(){
        local output=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I) 
        local airport=$(echo $output | grep 'AirPort' | awk -F': ' '{print $2}')

        if [ "$airport" = "Off" ]; then
                local color='%F{red}'
                echo -n "%{$color%}Wifi Off"
        else
                local ssid=$(echo $output | grep ' SSID' | awk -F': ' '{print $2}')
                local bar_count=$(osx_wifi)
                local bars=$(osx_wifi -u)
                local color='%F{yellow}'

                [[ $bar_count -ge 3 ]] && color='%F{green}'
                [[ $bar_count -eq 2 ]] && color='%F{yellow}'
                [[ $bar_count -lt 2 ]] && color='%F{red}'

                echo -n "%{$color%} $bars $ssid %{%f%}" # relies on Nerd Fonts
        fi
}

# pip should only run if there is a virtualenv currently activated
export PIP_REQUIRE_VIRTUALENV=true
# cache pip-installed packages to avoid re-downloading
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

syspip(){
   PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

#Google Go (Golang)
export GOPATH=$HOME/projects/go
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:/usr/local/opt/go/libexec/bin

#Haskell/Cabal
export PATH=$HOME/.cabal/bin:$PATH

#Node.JS

if [[ -s $HOME/.nvm ]];
 then 
	setopt nullglob 
	NVM_DIR=$HOME/.nvm 
	source $NVM_DIR/nvm.sh 
fi

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory extendedglob
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '${ZDOTDIR:-$HOME}.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

# Add homebrew to the completion path
fpath=("/usr/local/bin/" $fpath)

# RVM
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

# Editor Setting
if [ "$(uname)" = "Darwin" ]; then #Only OS X
    if [[ -x /usr/local/bin/mvim ]]; then # Prefer MacVim
        export VISUAL="/usr/local/bin/mvim -v"
    elif [[ -x /usr/local/bin/mate ]]; then #Alternatively use TextMate2 if MacVim is not installed
        export VISUAL="/usr/local/bin/mate -w"
    fi
else
    export VISUAL="/usr/local/bin/vim"
fi
export EDITOR="${VISUAL}"

# Clean up git branches left over from git-flow after merge
gitclean(){
    git branch --merged | egrep -v "^\*|master|develop" | xargs -n 1 git branch -d
}
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
